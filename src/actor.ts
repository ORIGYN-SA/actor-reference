import { Actor, ActorSubclass, HttpAgent } from '@dfinity/agent';
import { getIdentity } from './identity';
import { ActorOptions } from './types';
import fetch from 'isomorphic-fetch';

/**
 * Creates a strongly-typed actor reference.
 * - T is the type of the actor reference, generated by the `dfx build` command.
 * @param options
 * @returns The strongly-typed actor reference.
 */
export const getActor = async <T>(options: ActorOptions<T>): Promise<ActorSubclass<T>> => {
  if (options.actor) {
    return options.actor;
  }

  let identity = options.identity;
  if (!identity && options.secret) {
    identity = await getIdentity(options.secret);
  }

  const agent =
    options.agent ??
    new HttpAgent({
      fetch,
      host: options.isLocal ? 'http://localhost:8000' : 'https://boundary.ic0.app',
      identity,
    });

  if (options.isLocal) {
    await agent.fetchRootKey();
  }

  const actor: ActorSubclass<T> =
    options.actor ??
    Actor.createActor(options.idlFactory, {
      ...options,
      agent,
    });

  return actor;
};
