import { ActorConfig, ActorSubclass, Identity } from '@dfinity/agent';
import { IDL } from '@dfinity/candid';

/**
 * Options for creating an identity instance from a secret (pem file, pem string or seed phrase)
 */
export type IdentitySecret = {
  /**
   * The path to a PEM encoded private key file
   */
  pemFilePath?: string;
  /**
   * A PEM encoded private key
   */
  pem?: string;
  /**
   * A 12 word seed phrase.
   */
  seed?: string;
} & ({ pemFilePath: string } | { pem: string } | { seed: string });

/**
 * Options for creating an actor reference.
 * - T is the type of the actor reference, generated by the `dfx build` command.
 */
export interface ActorOptions<T> extends ActorConfig {
  /**
   * IDL factory generated by the `dfx build` command.
   */
  idlFactory: IDL.InterfaceFactory;
  /**
   * Set to true to use a local canister.
   */
  isLocal?: boolean;
  /**
   * Identity to use for the actor.
   * - Ignored if actor or agent is provided.
   * - If not provided, will use the secret to create an identity.
   */
  identity?: Identity | Promise<Identity> | undefined;
  /**
   * Actor to use for the actor.
   * - If provided, will ignore the agent, identity and secret options.
   */
  actor?: ActorSubclass<T>;
  /**
   * Secret to use for the actor.
   * - Applies only in node context.
   * - This may be a seed phrase or a pem file containing a secret key (Secp256k or Ed25519).
   * - Ignored if actor, agent or identity is provided.
   */
  secret?: IdentitySecret;
  // agent?: Agent; provided in super class
}
